%{
    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>
    #include <math.h>
    #include "riskyc.h"

    // Contains token declaration - generated by Yacc
    #include "y.tab.h"

    int col = 1;
    int lineno = 1;

%}

alpha [a-zA-Z]
digit [0-9]
nonZero [1-9]

%%

"int"                       { yylval.value_string = (char*)malloc(strlen(yytext)+1);
                              strcpy(yylval.value_string, yytext); 
                              return TYPE_INT; 
                            }
"float"                     { yylval.value_string = (char*)malloc(strlen(yytext)+1);
                              strcpy(yylval.value_string, yytext); 
                              return TYPE_FLOAT; }
"char"                      { yylval.value_string = (char*)malloc(strlen(yytext)+1);
                              strcpy(yylval.value_string, yytext); 
                              return TYPE_CHAR; }
"void"                      { yylval.value_string = (char*)malloc(strlen(yytext)+1);
                              strcpy(yylval.value_string, yytext); 
                              return TYPE_VOID; }
"return"                    { return RETURN; }
"main"                      { return MAIN; }

"="                         { return EQUAL; }
"+"                         { return PLUS; }
"-"                         { return MINUS; }
"/"                         { return DIVIDE; }
"<"                         { printf("nasao <\n"); return LESS_THAN; }
">"                         { return GREATER_THAN; }
"<="                        { return LESS_EQ_THAN; }
">="                        { return GREATER_EQ_THAN; }
"=="                        { printf("nasao ==\n"); return EQUAL_TRUTH; }
"&&"                        { return LOGIC_AND; }
"||"                        { return LOGIC_OR; }
"!="                        { return NOT_EQUAL; }
"!"                         { return BITWISE_NOT; }
"&"                         { return BITWISE_AND; }
"|"                         { return BITWISE_OR; }

  /* Loops */
"if"                        { printf("nasao if\n"); return IF; }
"else"                      { return ELSE; }
"else if"                   { return ELSE_IF; }
"for"                       { return FOR; }
"while"                     { return WHILE; }

  /* Integers */

0                                           { yylval.value_int = 0; return INT; }
{nonZero}({digit})*([eE][+-]?[0-9]+)?       { yylval.value_int = (int)round(atof(yytext)); return INT; }


  /* Floats */

{nonZero}({digit})*"."({digit})*([eE][+-]?[0-9]+)?   { yylval.value_float = atof(yytext); return FLOAT; }


  /* Identifiers */

{alpha}({alpha}|{digit}|_)*   { 
    yylval.id_obj.name = malloc(strlen(yytext)+1);
    strcpy(yylval.id_obj.name, yytext);
    yylval.id_obj.src.line = lineno;
    yylval.id_obj.src.col = col - yyleng;
    return ID;
}


  /* Characters */

"\'"({alpha}|{digit})"\'"       { yylval.value_char = yytext[1]; return CHARACTER; }


  /* Strings */

"\""({alpha}|{digit})+"\""      {
    yylval.value_string = (char*)malloc(strlen(yytext)+1);
    strcpy(yylval.value_string, yytext);
    return STRING;
}

"*"                         { return STAR; }
","                         { return COMMA; }
"{"                         { return CURLY_OPEN; }
"}"                         { return CURLY_CLOSED; }
"("                         { return BRACKET_OPEN; }
")"                         { return BRACKET_CLOSED; }

[ \t]*                      { ; }
[\n]                        { lineno++; }//return NEWLINE; }
";"                         { return SEMICOLON;  }
[:()]                       { return *yytext; }
.                           { return EOF_TOKEN; }


%%

int yywrap() {
    return 1;
}
